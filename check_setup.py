import os
import sys
import json
from dotenv import load_dotenv

def find_file(filename, search_paths=None):
    """–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö"""
    if search_paths is None:
        search_paths = ['', 'venv', '.venv']
    
    for path in search_paths:
        filepath = os.path.join(path, filename)
        if os.path.exists(filepath):
            return filepath
    return None

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ .env"""
    env_path = find_file('.env')
    if not env_path:
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.sample")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª .env –ø–æ –ø—É—Ç–∏: {env_path}")
    
    load_dotenv(env_path)
    ai_key = os.getenv('aiTonnelKey')
    firebase_url = os.getenv('FIREBASE_DATABASE_URL')
    
    if not ai_key or ai_key == 'your_aitunnel_key_here':
        print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω aiTonnelKey –≤ —Ñ–∞–π–ª–µ .env")
        return False
    
    if not firebase_url or firebase_url == 'your_firebase_database_url_here':
        print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω FIREBASE_DATABASE_URL –≤ —Ñ–∞–π–ª–µ .env")
        return False
    
    print("‚úÖ –§–∞–π–ª .env –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def check_firebase_creds():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Firebase"""
    creds_path = find_file('firebase-credentials.json')
    if not creds_path:
        print("‚ùå –§–∞–π–ª firebase-credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞, venv/ –∏–ª–∏ .venv/")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª firebase-credentials.json –ø–æ –ø—É—Ç–∏: {creds_path}")
    
    try:
        with open(creds_path, 'r') as f:
            creds = json.load(f)
            
        required_fields = ['type', 'project_id', 'private_key_id', 'private_key', 'client_email']
        for field in required_fields:
            if field not in creds or not creds[field]:
                print(f"‚ùå –í —Ñ–∞–π–ª–µ firebase-credentials.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ: {field}")
                return False
            
        print("‚úÖ –§–∞–π–ª firebase-credentials.json –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ firebase-credentials.json: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ firebase-credentials.json: {str(e)}")
        return False

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        import firebase_admin
        import faker
        import openai
        import python_dotenv
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {str(e)}")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: pip install -r requirements.txt")
        return False

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...\n")
    
    env_ok = check_env_file()
    firebase_ok = check_firebase_creds()
    deps_ok = check_requirements()
    
    print("\n" + "="*50)
    
    if env_ok and firebase_ok and deps_ok:
        print("\n‚úÖ –í—Å—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print("   python generator.py")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –≤—ã—à–µ –æ—à–∏–±–∫–∏.")
    
    return 0 if (env_ok and firebase_ok and deps_ok) else 1

if __name__ == "__main__":
    sys.exit(main())
